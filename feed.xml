<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://teklithaphtu.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://teklithaphtu.com/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-08-21T11:55:52+00:00</updated><id>https://teklithaphtu.com/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Enhancing Security with Sentinel Queries:- Real-World Use Cases</title><link href="https://teklithaphtu.com/blog/2024/microsoft-sentinel/" rel="alternate" type="text/html" title="Enhancing Security with Sentinel Queries:- Real-World Use Cases"/><published>2024-04-25T14:14:00+00:00</published><updated>2024-04-25T14:14:00+00:00</updated><id>https://teklithaphtu.com/blog/2024/microsoft-sentinel</id><content type="html" xml:base="https://teklithaphtu.com/blog/2024/microsoft-sentinel/"><![CDATA[<p>Microsoft Sentinel is a cloud-based SIEM (Security Information and Event Management) and SOAR (Security Orchestration, Automation, and Response) solution designed to detect, investigate, respond to, and hunt threats across enterprise infrastructures and products. Under the hood, it is an ocean of logs collected from various network devices and applications, ingested through data connectors and enhanced by machine learning, KQL (Kusto Query Language—a custom query language), and analytics, to name a few.</p> <p>In this blog post, I provide Kusto queries for various real world use cases to stay fit your organizational security posture. From identifying unauthorized access attempts to monitoring network traffic and detecting malicious activities, these queries will help you proactively secure your environment.</p> <p>In case you are new to Sentinel, I recommend checking out the <a href="https://docs.microsoft.com/en-us/azure/sentinel/overview">official documentation</a> and the following <a href="https://www.youtube.com/watch?v=xMj7a4Ns_cU">youtube video</a> to get started.</p> <p>Success!!</p> <h2 id="detecting-access-from-the-tor-network">Detecting Access from the Tor Network</h2> <p><strong>Description</strong>: Adversaries often use the VPN and Tor network to hide and anonymize their activities, making it challenging to trace their origin. They sometimes use Tor to access internal resources, exfiltrate data, or conduct brute force authentication attempts. This query can detect and alert on any login attempts from Tor browsers. To implement this, you’ll need to create a watchlist of known Tor exit nodes and upload it to Sentinel. You can find a list of Tor exit nodes <a href="https://check.torproject.org/exit-addresses">here</a> or <a href="https://github.com/SecOps-Institute/Tor-IP-Addresses">here</a>.</p> <p><strong>Query</strong>:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Retrieve list of Tor exit nodes IPs from the watchlist</span>
<span class="kd">let</span> <span class="nx">watchlist</span> <span class="o">=</span> <span class="p">(</span><span class="nc">_GetWatchlist</span><span class="p">(</span><span class="dl">'</span><span class="s1">TorExitNodes</span><span class="dl">'</span><span class="p">)</span> <span class="o">|</span> <span class="nx">project</span> <span class="nx">TorIPAddress</span><span class="p">);</span>
<span class="c1">// SigninLogs from the past 5 minutes</span>
<span class="nx">SigninLogs</span>
<span class="o">|</span> <span class="nx">where</span> <span class="nx">TimeGenerated</span> <span class="o">&gt;</span> <span class="nf">ago</span><span class="p">(</span><span class="mi">5</span><span class="nx">m</span><span class="p">)</span>
<span class="c1">// Check if the IPAddress from SigninLogs is in the watchlist</span>
<span class="o">|</span> <span class="nx">where</span> <span class="nx">IPAddress</span> <span class="k">in </span><span class="p">(</span><span class="nx">watchlist</span><span class="p">)</span>
<span class="o">|</span> <span class="nx">project</span> <span class="nx">TimeGenerated</span><span class="p">,</span> <span class="nx">IPAddress</span>
</code></pre></div></div> <p><strong>Test</strong>: To trigger this alert, anyone can use a Tor browser and attempt to log in to https://portal.azure.com.</p> <h2 id="detecting-logins-from-blacklisted-ips">Detecting Logins from Blacklisted IPs</h2> <p><strong>Description</strong>: If a certain IP address has been used in the past for attack in the past, there is a high probability that a later successful login from that IP address is malicious. This rule detects logins from any of the black list of IPs that has previously been compiled by a system administrator.</p> <p><strong>Query</strong>:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">blacklistIPs</span> <span class="o">=</span> <span class="nc">_GetWatchlist</span><span class="p">(</span><span class="dl">'</span><span class="s1">blacklistOfIps</span><span class="dl">'</span><span class="p">)</span> <span class="o">|</span> <span class="nx">project</span> <span class="nx">ip</span><span class="p">;</span>
<span class="c1">// Load the list of list blacklisted IPs</span>
<span class="nx">SigninLogs</span>
<span class="o">|</span> <span class="nx">where</span> <span class="nx">ResultType</span> <span class="o">==</span> <span class="mi">0</span>
<span class="c1">// Only successful logins</span>
<span class="o">|</span> <span class="nx">where</span> <span class="nx">IPAddress</span> <span class="k">in </span><span class="p">(</span><span class="nx">blacklistIPs</span><span class="p">)</span>
<span class="c1">// IP address matches blacklisted IPs</span>
<span class="o">|</span> <span class="nx">project</span> <span class="nx">TimeGenerated</span><span class="p">,</span> <span class="nx">IPAddress</span><span class="p">,</span> <span class="nx">AccountDisplayName</span>
</code></pre></div></div> <p><strong>Test</strong>: To test this rule and to trigger the alert, use a VPN to switch to a known bad IP and then log in.</p> <h2 id="detecting-communication-with-a-cc-server">Detecting Communication with a C&amp;C Server</h2> <p>Command and Control (C&amp;C) servers, as it names speak, are launching pad for cyber criminals used to communicate with compromised systems, often to exfiltrate data or send malicious commands. This query checks for any incoming successful communication from a known blacklisted C&amp;C IP. An external data source is used to create the blacklist of C&amp;C server IPs. Identifying such communications can help in detecting and mitigating ongoing attacks.</p> <p><strong>Query</strong>:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">BlockList</span> <span class="o">=</span>
    <span class="p">(</span><span class="nf">externaldata</span><span class="p">(</span><span class="nx">ip</span><span class="p">:</span><span class="nx">string</span><span class="p">)</span>
    <span class="p">[@</span><span class="dl">"</span><span class="s2">https://rules.emergingthreats.net/blockrules/compromised-ips.txt</span><span class="dl">"</span>
    <span class="p">]</span>
    <span class="nf">with</span><span class="p">(</span><span class="nx">format</span><span class="o">=</span><span class="dl">"</span><span class="s2">csv</span><span class="dl">"</span><span class="p">)</span>
    <span class="o">|</span> <span class="nx">where</span> <span class="nx">ip</span> <span class="nx">matches</span> <span class="nx">regex</span> <span class="dl">"</span><span class="s2">(^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)</span><span class="se">\\\\</span><span class="s2">.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)</span><span class="se">\\\\</span><span class="s2">.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)</span><span class="se">\\\\</span><span class="s2">.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)</span><span class="dl">"</span>
    <span class="o">|</span> <span class="nx">distinct</span> <span class="nx">ip</span>
<span class="p">);</span>
<span class="nx">SigninLogs</span>
<span class="o">|</span> <span class="nx">sort</span> <span class="nx">by</span> <span class="nx">TimeGenerated</span>
<span class="o">|</span> <span class="nx">where</span> <span class="nx">IPAddress</span> <span class="k">in </span><span class="p">(</span><span class="nx">BlockList</span><span class="p">)</span> <span class="nx">or</span> <span class="nx">IPAddress</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">85.145.247.7</span><span class="dl">"</span>
<span class="c1">// Add specific IP for testing</span>
<span class="o">|</span> <span class="nx">where</span> <span class="nx">ResultType</span> <span class="o">==</span> <span class="mi">0</span>
<span class="c1">// Only successful logins</span>
<span class="o">|</span> <span class="nx">project</span> <span class="nx">TimeGenerated</span><span class="p">,</span> <span class="nx">OperationName</span><span class="p">,</span> <span class="nx">Identity</span><span class="p">,</span> <span class="nx">IPAddress</span><span class="p">,</span> <span class="nx">DeviceDetail</span>

</code></pre></div></div> <p><strong>Test</strong>: To test this rule, add your IP to the list of known C&amp;C server IPs and attempt a login.</p> <h2 id="how-to-deal-with-account-enumeration-attacks">How to Deal With Account Enumeration Attacks</h2> <p>An adversary can use account enumeration attacks to identify valid usernames and password. This query targets a tactic commonly used by adversaries: account detection attacks leveraging Brute Force (T1087) from the MITRE ATT&amp;CK framework;For more information follow this <a href="https://attack.mitre.org/techniques/T1087/">link</a>. It identifies a surge in login attempts from a single IP targeting multiple user accounts, a potential sign of brute-forcing valid accounts.</p> <p><strong>Query</strong>:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">BorderValue</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="nx">SigninLogs</span>
<span class="o">|</span> <span class="nx">distinct</span> <span class="nx">UserDisplayName</span><span class="p">,</span> <span class="nx">IPAddress</span>
<span class="o">|</span> <span class="nx">summarize</span> <span class="nx">AmountOfAccounts</span> <span class="o">=</span> <span class="nf">count</span><span class="p">(),</span> <span class="nx">Adresses</span> <span class="o">=</span> <span class="nf">make_list</span><span class="p">(</span><span class="nx">UserDisplayName</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="nx">by</span> <span class="nx">IPAddress</span>
<span class="o">|</span> <span class="nx">where</span> <span class="nx">AmountOfAccounts</span> <span class="o">&gt;=</span> <span class="nx">BorderValue</span>
</code></pre></div></div> <h2 id="detecting-mfa-fatigue-attacks">Detecting MFA Fatigue Attacks</h2> <p>MFA fatigue attacks exploit a user’s frustration with repeated MFA prompts, aiming to bypass security by overwhelming the user with requests. This method is dangerous because it requires valid credentials, making it a high-risk attack. If the user inadvertently approves one of the persistent MFA requests, the attacker gains access.</p> <p>To detect such attacks, we can use Microsoft Sentinel to monitor for repeated occurrences of error code 500121—indicating strong authentication failures. Specifically, if more than three such failures occur from the same account within 10 minutes, it could signal an MFA fatigue attack.</p> <p>This tactic aligns with MITRE ATT&amp;CK’s <a href="https://attack.mitre.org/techniques/T1621/">T1621</a> under the Credential Access category, which covers methods like MFA Request Generation.</p> <p><strong>Query</strong>:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// KQL Query to detect MFA Fatigue Attacks</span>
<span class="nx">SigninLogs</span>
<span class="c1">// Filtering for strong authentication failures</span>
<span class="o">|</span> <span class="nx">where</span> <span class="nx">ResultType</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">500121</span><span class="dl">"</span>
<span class="c1">// Aggregating failed attempts by account within 10-minute intervals</span>
<span class="o">|</span> <span class="nx">summarize</span> <span class="nx">FailureCount</span> <span class="o">=</span> <span class="nf">count</span><span class="p">()</span> <span class="nx">by</span> <span class="nx">Identity</span><span class="p">,</span> <span class="nf">bin</span><span class="p">(</span><span class="nx">TimeGenerated</span><span class="p">,</span> <span class="mi">10</span><span class="nx">m</span><span class="p">)</span>
<span class="c1">// Flagging instances where more than three failures occurred</span>
<span class="o">|</span> <span class="nx">where</span> <span class="nx">FailureCount</span> <span class="o">&gt;</span> <span class="mi">3</span>
</code></pre></div></div> <h2 id="test">Test</h2> <p>To test this rule, attempt to log in to a service that requires MFA and intentionally fail the MFA prompt three times.</p>]]></content><author><name></name></author><category term="security"/><category term="soc,"/><category term="microsoft,"/><category term="sentinel,"/><category term="KQL"/><summary type="html"><![CDATA[In this blog post, I will be discussing various query rules and hunting queries that can be used by SOC analysts to detect and investigate security incidents using Microsoft Sentinel.]]></summary></entry></feed>